#import ../types//*.graphql

extend type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
    usersByEmail(email: String @where(operator: "like")): [User!]!
        @paginate(type: "paginator" model: "App\\User")
}

extend type Mutation {
    createUser(
        name: String
            @rules(apply: ["required"])
        email: String
            @rules(apply: ["required",
                "email",
                "unique:users,email"]
            )
        password: String
            @bcrypt
            @rules(apply: ["required"])
    ): User
    @create(model: "App\\User")
    updateUser(
        id: ID!
            @rules(
                apply: ["required"],
                messages: { required: "idは必須です" }
            )
        name: String!
        email: String!
            @rules(apply: ["email"])
    ): User
        @update(model: "App\\User")
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User
        @delete(model: "App\\User")
    deleteUsersByEmail(
        email: String!  @rules(apply: ["required"])
    ): DummyResponse
        @field(resolver: "App\\Http\\GraphQL\\Mutations\\DeleteUsersByEmail@resolve")
    createUsers(
        users: Users
    ): DummyResponse
    @field(resolver: "App\\Http\\GraphQL\\Mutations\\CreateUsers@resolve")

}
