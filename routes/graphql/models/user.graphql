extend type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
    usersByEmail(email: String @where(operator: "like")): [User!]!
    @paginate(type: "paginator" model: "App\\User")
}

extend type Mutation {
    createUser(
        name: String
            @rules(apply: ["required"])
        email: String
            @rules(apply: ["required",
                "email",
                "unique:users,email"]
            )
        password: String
            @bcrypt
            @rules(apply: ["required"])
    ): User
    @create(model: "App\\User")
    updateUser(
        id: ID
            @rules(apply: ["required"])
        name: String
        email: String
            @rules(apply: ["email"])
    ): User
        @update(model: "App\\User")
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User
        @delete(model: "App\\User")
    deleteUsersByEmail(
        email: String!  @rules(apply: ["required"])
    ): DummyResponse
        @field(resolver: "App\\Http\\GraphQL\\Mutations\\DeleteUsersByEmail@handle")
}

type DummyResponse {
    res: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    articles: [Article] @hasMany
    createdAt: DateTime! @rename(attribute: created_at)
    updatedAt: DateTime! @rename(attribute: updated_at)
}

type Article {
    id: ID!
    userId: Int! @rename(attribute: user_id)
    title: String!
    body: String!
    createdAt: DateTime! @rename(attribute: created_at)
    updatedAt: DateTime! @rename(attribute: updated_at)
}

